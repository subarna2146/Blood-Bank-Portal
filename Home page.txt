HOMEPAGE:
package bloodbankprojectfinal;


import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JLayeredPane;

import java.awt.CardLayout;
import java.awt.Color;

import javax.swing.JLabel;

import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import javax.swing.JRadioButton;
import javax.swing.JSlider;
import javax.swing.JTextArea;
import javax.swing.JButton;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import javax.swing.JCheckBox;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.imageio.ImageIO;
class Home{
    Home(String email) throws IOException{
        new HomePage(email);
    }
    Home() throws IOException
    {
        new HomePage("uma@gmail.com");
    }
}
public class HomePage extends JFrame {

	
	 JTextField textField;
	 JTextField textField_1;
	 JTextField textField_2;
	 JTextField textField_3;
	 JTextField textField_4;
	 JTable table;
	 JTextField textField_5;
	 JTextField textField_6;
	 JTextField textField_7;
	 JTextField textField_8;
	 JTextField textField_9;
	 JTable table_1;
	 JTable table_2;
	 JTextField textField_10;
	 JTextField textField_12;
	 JTextField textField_11;

	
	
	

	
	
	public  HomePage(String final_mail_id_user) throws IOException  {
		getContentPane().setBackground(Color.white);
		getContentPane().setForeground(Color.WHITE);
		setBounds(100, 100, 963, 759);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		getContentPane().setLayout(null);
		
		JLayeredPane layeredPane = new JLayeredPane();
		layeredPane.setBounds(198, 126, 735, 573);
		getContentPane().add(layeredPane);
		layeredPane.setLayout(new CardLayout(0, 0));
		
		JPanel panel = new JPanel();
		layeredPane.add(panel, "0");
		panel.setLayout(null);
		
		//JLabel lblWelcomePage = new JLabel("WELCOME PAGE label");
                		
		JPanel panel_3 = new JPanel();
		
		panel_3.setBounds(110, 400, 270, 50);
		panel.add(panel_3);
                                panel_3.setBackground(Color.black);
		panel_3.setLayout(null);
		
		JLabel lblNewLabel_2 = new JLabel("DONATE BLOOD");
		lblNewLabel_2.setFont(new Font("Century", Font.BOLD, 19));
                               lblNewLabel_2.setForeground(Color.MAGENTA);
		lblNewLabel_2.setBounds(12, 13, 200, 50);
                              
		panel_3.add(lblNewLabel_2);
		
                BufferedImage myPicture = ImageIO.read(new File("D:\\welcome1.jpg"));
JLabel lblWelcomePage = new JLabel(new ImageIcon(myPicture));
//add(lblWelcomePage);
		lblWelcomePage.setBounds(0, 0, 735, 573);
		panel.add(lblWelcomePage);
		
		JPanel panel_donorRegistration = new JPanel();
		layeredPane.add(panel_donorRegistration, "1");
		panel_donorRegistration.setLayout(null);
		
		JLabel lblDonorRegistration = new JLabel("DONOR REGISTRATION");
		lblDonorRegistration.setFont(new Font("Algerian", Font.PLAIN, 18));
		lblDonorRegistration.setBounds(255, 13, 250, 46);
		panel_donorRegistration.add(lblDonorRegistration);
		
		JLabel lblFirstName = new JLabel("FIRST NAME");
		lblFirstName.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName.setBounds(74, 87, 117, 16);
		panel_donorRegistration.add(lblFirstName);
		
		JLabel lblFirstName_1 = new JLabel("LAST NAME");
		lblFirstName_1.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1.setBounds(74, 116, 117, 16);
		panel_donorRegistration.add(lblFirstName_1);
		
		JLabel lblFirstName_1_1 = new JLabel("E-MAIL ID");
		lblFirstName_1_1.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1_1.setBounds(74, 145, 117, 16);
		panel_donorRegistration.add(lblFirstName_1_1);
		
		JLabel lblFirstName_1_2 = new JLabel("AGE");
		lblFirstName_1_2.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1_2.setBounds(74, 174, 117, 16);
		panel_donorRegistration.add(lblFirstName_1_2);
		
		JLabel lblFirstName_1_3 = new JLabel("BLOOD GROUP");
		lblFirstName_1_3.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1_3.setBounds(74, 198, 117, 16);
		panel_donorRegistration.add(lblFirstName_1_3);
		
		JLabel lblFirstName_1_4 = new JLabel("GENDER");
		lblFirstName_1_4.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1_4.setBounds(74, 227, 117, 16);
		panel_donorRegistration.add(lblFirstName_1_4);
		
		JLabel lblFirstName_1_5 = new JLabel("WEIGHT");
		lblFirstName_1_5.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1_5.setBounds(74, 256, 117, 16);
		panel_donorRegistration.add(lblFirstName_1_5);
		
		JLabel lblFirstName_1_6 = new JLabel("CITY");
		lblFirstName_1_6.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1_6.setBounds(78, 313, 117, 16);
		panel_donorRegistration.add(lblFirstName_1_6);
		
		JLabel lblFirstName_1_7 = new JLabel("ADDRESS");
		lblFirstName_1_7.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1_7.setBounds(74, 348, 117, 16);
		panel_donorRegistration.add(lblFirstName_1_7);
		
		JLabel lblFirstName_1_8 = new JLabel("MOBILE NUMBER");
		lblFirstName_1_8.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1_8.setBounds(74, 420, 144, 16);
		panel_donorRegistration.add(lblFirstName_1_8);
		
		textField = new JTextField();
		textField.setEditable(false);
		textField.setBounds(299, 83, 178, 22);
		panel_donorRegistration.add(textField);
		textField.setColumns(10);
		
		textField_1 = new JTextField();
		textField_1.setEditable(false);
		textField_1.setBounds(299, 112, 178, 22);
		panel_donorRegistration.add(textField_1);
		textField_1.setColumns(10);
		
		textField_2 = new JTextField();
		textField_2.setEditable(false);
		textField_2.setColumns(10);
		textField_2.setBounds(299, 141, 178, 22);
		panel_donorRegistration.add(textField_2);
		
		JComboBox comboBox_age = new JComboBox();
		comboBox_age.setBounds(299, 165, 76, 22);
		panel_donorRegistration.add(comboBox_age);
		
		for(int i=18;i<=60;i++){
			comboBox_age.addItem(i);
		}
		comboBox_age.setSelectedIndex(-1);
		
		JComboBox comboBox_blood = new JComboBox();
		comboBox_blood.setEnabled(false);
		comboBox_blood.setBounds(299, 194, 76, 22);
		panel_donorRegistration.add(comboBox_blood);
		
		comboBox_blood.addItem("A+");
		comboBox_blood.addItem("B+");
		comboBox_blood.addItem("A-");
		comboBox_blood.addItem("B-");
		comboBox_blood.addItem("O+");
		comboBox_blood.addItem("O-");
		comboBox_blood.addItem("AB+");
		comboBox_blood.addItem("AB-");
		comboBox_blood.setSelectedIndex(-1);
		
		JRadioButton rdbtnMale = new JRadioButton("MALE");
		rdbtnMale.setEnabled(false);
		rdbtnMale.setBounds(298, 222, 68, 25);
		panel_donorRegistration.add(rdbtnMale);
		
		JRadioButton rdbtnNewRadioButton = new JRadioButton("FEMALE");
		rdbtnNewRadioButton.setEnabled(false);
		rdbtnNewRadioButton.setBounds(370, 222, 88, 25);
		panel_donorRegistration.add(rdbtnNewRadioButton);
		
		JRadioButton rdbtnNewRadioButton_1 = new JRadioButton("OTHERS");
		rdbtnNewRadioButton_1.setEnabled(false);
		rdbtnNewRadioButton_1.setBounds(462, 222, 88, 25);
		panel_donorRegistration.add(rdbtnNewRadioButton_1);
		
		ButtonGroup bg=new ButtonGroup();
		bg.add(rdbtnMale);
		bg.add(rdbtnNewRadioButton);
		bg.add(rdbtnNewRadioButton_1);
		
		JLabel lblNewLabel = new JLabel("00");
		lblNewLabel.setFont(new Font("Ravie", Font.BOLD, 16));
		lblNewLabel.setBounds(565, 256, 56, 36);
		panel_donorRegistration.add(lblNewLabel);
		

		
		JSlider slider = new JSlider(45, 90, 45);
		slider.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent arg0) {
				lblNewLabel.setText(Integer.toString(slider.getValue()));  
			
			}
		});
		slider.setBounds(299, 246, 254, 46);
		slider.setMajorTickSpacing(10);
		slider.setMinorTickSpacing(1);
		slider.setPaintTicks(true);
		slider.setPaintLabels(true);
		
		
		panel_donorRegistration.add(slider);
		
		textField_3 = new JTextField();
		textField_3.setColumns(10);
		textField_3.setBounds(299, 309, 178, 22);
		panel_donorRegistration.add(textField_3);
		
		JTextArea textArea = new JTextArea();
		textArea.setBounds(296, 344, 229, 64);
		panel_donorRegistration.add(textArea);
		
		textField_4 = new JTextField();
		textField_4.setEditable(false);
		textField_4.setColumns(10);
		textField_4.setBounds(299, 416, 178, 22);
		panel_donorRegistration.add(textField_4);
		
	  	
			register_donor_no obj=new register_donor_no();
			final int d_number=obj.get_no();
		
		JButton btnRegister = new JButton("REGISTER");
		btnRegister.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
                    try {
                  
					
					int age=(int) comboBox_age.getItemAt(comboBox_age.getSelectedIndex()); 
					String blood_group=new String((String) comboBox_blood.getItemAt(comboBox_blood.getSelectedIndex())); 
					int weight=slider.getValue();
					String city=textField_3.getText();
					String address=textArea.getText();				
					String num=textField_4.getText();
					String email=textField_2.getText();
		            
						String query="insert into donor_details values(?,?,?,?,?,?,?)";
				  Connection con = JavaBean.login.getConnection();
						
						PreparedStatement pstmt = con.prepareStatement(query);
			            pstmt.setInt(1,d_number);
			            pstmt.setString(2,email);
			            pstmt.setInt(3,age);
			            pstmt.setString(4,blood_group);
			            pstmt.setInt(5,weight);
			            pstmt.setString(6,city);
			            pstmt.setString(7,address);

			            pstmt.executeUpdate();
			            con.close();
			            JOptionPane.showMessageDialog(null, "REGISTERED SUCCESFULLY");
                                                          new SendMailSSL( email,"donor_registration");
			            
					
					
				} catch (Exception e1) {
					
					JOptionPane.showMessageDialog(null, e1);
					
				}
			
			}
			
		});
		btnRegister.setBounds(98, 477, 97, 25);
		panel_donorRegistration.add(btnRegister);
		
                             
		
		JButton btnExit = new JButton("EXIT");
		btnExit.setBounds(441, 477, 97, 25);
		panel_donorRegistration.add(btnExit);
                
                
		btnExit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				layeredPane.removeAll();
				layeredPane.add(panel);
				layeredPane.repaint();
				layeredPane.revalidate();			
			}
		});
		
		
		JPanel panel_search_donor = new JPanel();
		layeredPane.add(panel_search_donor, "2");
		panel_search_donor.setLayout(null);
		
		JLabel lbl_searchdonor = new JLabel("BLOOD GROUP");
		lbl_searchdonor.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lbl_searchdonor.setBounds(89, 79, 134, 20);
		panel_search_donor.add(lbl_searchdonor);
		
		JLabel lbl_searchdonor_1 = new JLabel("CITY");
		lbl_searchdonor_1.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lbl_searchdonor_1.setBounds(89, 127, 134, 20);
		panel_search_donor.add(lbl_searchdonor_1);
		
		JComboBox comboBox_blood_search = new JComboBox();
		comboBox_blood_search.setBounds(277, 77, 102, 22);
		panel_search_donor.add(comboBox_blood_search);
		
		comboBox_blood_search.addItem("A+");
		comboBox_blood_search.addItem("B+");
		comboBox_blood_search.addItem("A-");
		comboBox_blood_search.addItem("B-");
		comboBox_blood_search.addItem("O+");
		comboBox_blood_search.addItem("O-");
		comboBox_blood_search.addItem("AB+");
		comboBox_blood_search.addItem("AB-");
		comboBox_blood_search.setSelectedIndex(-1);
		
		JComboBox comboBox_1 = new JComboBox();
		comboBox_1.setBounds(277, 125, 102, 22);
		
		try {
			
			String query="SELECT DISTINCT d_city FROM donor_details;";
			  Connection con = JavaBean.login.getConnection();
			Statement st=con.createStatement();
			ResultSet rs=st.executeQuery(query);
			while(rs.next())   comboBox_1.addItem(rs.getString("d_city"));
			 
			
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null,"error");
		}
		
		
	
		panel_search_donor.add(comboBox_1);
		comboBox_1.setSelectedIndex(-1);
		
		JButton btnNewButton = new JButton("GO");
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				DefaultTableModel dm = (DefaultTableModel)table.getModel();
				while(dm.getRowCount() > 0)
				{
				    dm.removeRow(0);
				}
				
				
				String b_group=new String((String) comboBox_blood_search.getItemAt(comboBox_blood_search.getSelectedIndex()));
				String city=new String((String) comboBox_1.getItemAt(comboBox_1.getSelectedIndex()));
				String query="SELECT donor_details.d_number, CONCAT(user_details.u_first_name,user_details.u_last_name)as Name, user_details.sex,donor_details.d_age,user_details.u_mobile_no,donor_details.d_mail_id FROM donor_details INNER JOIN user_details ON donor_details.d_mail_id=user_details.u_mail_id where user_details.u_blood_group=\"" +b_group+"\" AND donor_details.d_city=\""+city+"\";";
				try {
	 				  Connection con = JavaBean.login.getConnection();
	     			Statement st=con.createStatement();
	     			ResultSet rs=st.executeQuery(query);
	     			while(rs.next())  {
	     				int d_number=rs.getInt(1);
	     				String name=rs.getString(2);
	     				String gender=rs.getString(3);
	     				int age=rs.getInt(4);
	     				String number=rs.getString(5);
	     				String mail_id=rs.getString(6);
	     				Object tblarr[]={d_number,name,gender,age,number,mail_id};
	     				DefaultTableModel model=(DefaultTableModel)table.getModel();
	     				model.addRow(tblarr);
	     						
	     			}
	     			con.close();
		     			}	
					catch (Exception e2) {
						JOptionPane.showMessageDialog(null,e);
						System.out.println(e);
					}
			

			}
		});
		btnNewButton.setBounds(184, 193, 97, 25);
		panel_search_donor.add(btnNewButton);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(89, 264, 634, 279);
		panel_search_donor.add(scrollPane);
		
		table = new JTable();
		table.setBounds(0, 0, 1, 1);
		panel_search_donor.add(table);
		
		table = new JTable();
		table.setBounds(89, 274, 555, 248);
	
		DefaultTableModel model=new DefaultTableModel();
		Object[] table_col={"DONOR_NO","NAME","GENDER","AGE","MOBILE NUMBER","EMAIL-ID"};
		Object[] table_row=new Object[0];
		model.setColumnIdentifiers(table_col);
		table.setModel(model);
		scrollPane.setViewportView(table);
		
		JPanel panel_blood_stock = new JPanel();
		layeredPane.add(panel_blood_stock, "3");
		panel_blood_stock.setLayout(null);
		
		JPanel panel_1 = new JPanel();
		panel_1.setBackground(new Color(255, 0, 0));
		panel_1.setBounds(66, 67, 97, 108);
		panel_blood_stock.add(panel_1);
		panel_1.setLayout(null);
		
		JLabel lblA = new JLabel("A+");
		lblA.setFont(new Font("Ravie", Font.PLAIN, 27));
		lblA.setBounds(26, 23, 45, 43);
		panel_1.add(lblA);
		
		JLabel label = new JLabel("0");
		label.setBounds(15, 79, 56, 16);
		panel_1.add(label);
		
		JPanel panel_1_1 = new JPanel();
		panel_1_1.setLayout(null);
		panel_1_1.setBackground(Color.RED);
		panel_1_1.setBounds(242, 67, 97, 108);
		panel_blood_stock.add(panel_1_1);
		
		JLabel lblB = new JLabel("B+");
		lblB.setFont(new Font("Ravie", Font.PLAIN, 27));
		lblB.setBounds(26, 23, 45, 43);
		panel_1_1.add(lblB);
		
		JLabel label_1 = new JLabel("0");
		label_1.setBounds(15, 79, 56, 16);
		panel_1_1.add(label_1);
		
		JPanel panel_1_2 = new JPanel();
		panel_1_2.setLayout(null);
		panel_1_2.setBackground(Color.RED);
		panel_1_2.setBounds(419, 67, 97, 108);
		panel_blood_stock.add(panel_1_2);
		
		JLabel lblA_1 = new JLabel("A-");
		lblA_1.setFont(new Font("Ravie", Font.PLAIN, 27));
		lblA_1.setBounds(26, 23, 45, 43);
		panel_1_2.add(lblA_1);
		
		JLabel label_2 = new JLabel("0");
		label_2.setBounds(15, 79, 56, 16);
		panel_1_2.add(label_2);
		
		JPanel panel_1_3 = new JPanel();
		panel_1_3.setLayout(null);
		panel_1_3.setBackground(Color.RED);
		panel_1_3.setBounds(579, 67, 97, 108);
		panel_blood_stock.add(panel_1_3);
		
		JLabel lblB_1 = new JLabel("B-");
		lblB_1.setFont(new Font("Ravie", Font.PLAIN, 27));
		lblB_1.setBounds(26, 23, 45, 43);
		panel_1_3.add(lblB_1);
		
		JLabel label_3 = new JLabel("0");
		label_3.setBounds(15, 79, 56, 16);
		panel_1_3.add(label_3);
		
		JPanel panel_1_4 = new JPanel();
		panel_1_4.setLayout(null);
		panel_1_4.setBackground(Color.RED);
		panel_1_4.setBounds(66, 249, 97, 108);
		panel_blood_stock.add(panel_1_4);
		
		JLabel lblO = new JLabel("O+");
		lblO.setFont(new Font("Ravie", Font.PLAIN, 27));
		lblO.setBounds(26, 23, 45, 43);
		panel_1_4.add(lblO);
		
		JLabel label_4 = new JLabel("0");
		label_4.setBounds(15, 79, 56, 16);
		panel_1_4.add(label_4);
		
		JPanel panel_1_5 = new JPanel();
		panel_1_5.setLayout(null);
		panel_1_5.setBackground(Color.RED);
		panel_1_5.setBounds(242, 249, 97, 108);
		panel_blood_stock.add(panel_1_5);
		
		JLabel lblO_1 = new JLabel("O-");
		lblO_1.setFont(new Font("Ravie", Font.PLAIN, 27));
		lblO_1.setBounds(26, 23, 45, 43);
		panel_1_5.add(lblO_1);
		
		JLabel label_5 = new JLabel("0");
		label_5.setBounds(15, 79, 56, 16);
		panel_1_5.add(label_5);
		
		JPanel panel_1_6 = new JPanel();
		panel_1_6.setLayout(null);
		panel_1_6.setBackground(Color.RED);
		panel_1_6.setBounds(419, 249, 97, 108);
		panel_blood_stock.add(panel_1_6);
		
		JLabel lblAb = new JLabel("AB+");
		lblAb.setFont(new Font("Ravie", Font.PLAIN, 27));
		lblAb.setBounds(15, 23, 70, 55);
		panel_1_6.add(lblAb);
		
		JLabel label_6 = new JLabel("0");
		label_6.setBounds(15, 79, 56, 16);
		panel_1_6.add(label_6);
		
		JPanel panel_1_7 = new JPanel();
		panel_1_7.setLayout(null);
		panel_1_7.setBackground(Color.RED);
		panel_1_7.setBounds(579, 249, 97, 108);
		panel_blood_stock.add(panel_1_7);
		
		JLabel lblAb_1 = new JLabel("AB-");
		lblAb_1.setFont(new Font("Ravie", Font.PLAIN, 27));
		lblAb_1.setBounds(15, 23, 70, 43);
		panel_1_7.add(lblAb_1);
		
		JLabel label_7 = new JLabel("0");
		label_7.setBounds(15, 79, 56, 16);
		panel_1_7.add(label_7);
		
		JPanel panel_update = new JPanel();
                                
		panel_update.setLayout(null);
		layeredPane.add(panel_update, "update_panel");
		
		JLabel lblUpdate_1 = new JLabel("UPDATE");
		lblUpdate_1.setFont(new Font("Algerian", Font.PLAIN, 20));
		lblUpdate_1.setBounds(289, 13, 222, 46);
		panel_update.add(lblUpdate_1);
		
		JLabel lblFirstName_2 = new JLabel("FIRST NAME");
		lblFirstName_2.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_2.setBounds(74, 87, 117, 16);
		panel_update.add(lblFirstName_2);
		
		JLabel lblFirstName_1_9 = new JLabel("LAST NAME");
		lblFirstName_1_9.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1_9.setBounds(74, 116, 117, 16);
		panel_update.add(lblFirstName_1_9);
		
		JLabel lblFirstName_1_1_1 = new JLabel("E-MAIL ID");
		lblFirstName_1_1_1.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1_1_1.setBounds(74, 145, 117, 16);
		panel_update.add(lblFirstName_1_1_1);
		
		JLabel lblFirstName_1_2_1 = new JLabel("AGE");
		lblFirstName_1_2_1.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1_2_1.setBounds(74, 169, 117, 16);
		panel_update.add(lblFirstName_1_2_1);
		
		JLabel lblFirstName_1_3_1 = new JLabel("BLOOD GROUP");
		lblFirstName_1_3_1.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1_3_1.setBounds(74, 198, 117, 16);
		panel_update.add(lblFirstName_1_3_1);
		
		JLabel lblFirstName_1_4_1 = new JLabel("GENDER");
		lblFirstName_1_4_1.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1_4_1.setBounds(74, 227, 117, 16);
		panel_update.add(lblFirstName_1_4_1);
		
		JLabel lblFirstName_1_5_1 = new JLabel("WEIGHT");
		lblFirstName_1_5_1.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1_5_1.setBounds(74, 256, 117, 16);
		panel_update.add(lblFirstName_1_5_1);
		
		JLabel lblFirstName_1_6_1 = new JLabel("CITY");
		lblFirstName_1_6_1.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1_6_1.setBounds(78, 313, 117, 16);
		panel_update.add(lblFirstName_1_6_1);
		
		JLabel lblFirstName_1_7_1 = new JLabel("ADDRESS");
		lblFirstName_1_7_1.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1_7_1.setBounds(74, 348, 117, 16);
		panel_update.add(lblFirstName_1_7_1);
		
		JLabel lblFirstName_1_8_1 = new JLabel("MOBILE NUMBER");
		lblFirstName_1_8_1.setFont(new Font("Sitka Text", Font.PLAIN, 15));
		lblFirstName_1_8_1.setBounds(74, 420, 144, 16);
		panel_update.add(lblFirstName_1_8_1);
		
		textField_5 = new JTextField();
		textField_5.setColumns(10);
		textField_5.setBounds(299, 83, 178, 22);
		panel_update.add(textField_5);
		
		textField_6 = new JTextField();
		textField_6.setColumns(10);
		textField_6.setBounds(299, 112, 178, 22);
		panel_update.add(textField_6);
		
		textField_7 = new JTextField();
		textField_7.setEditable(false);
		textField_7.setColumns(10);
		textField_7.setBounds(299, 141, 178, 22);
		panel_update.add(textField_7);
		
		JComboBox comboBox_age_1 = new JComboBox();
		for(int i=18;i<=60;i++){
			comboBox_age_1.addItem(i);
		}	
		comboBox_age_1.setBounds(299, 165, 76, 22);
		panel_update.add(comboBox_age_1);
		comboBox_age_1.setSelectedIndex(-1);
		
		
		JComboBox comboBox_blood_1 = new JComboBox();
		comboBox_blood_1.addItem("A+");
		comboBox_blood_1.addItem("B+");
		comboBox_blood_1.addItem("A-");
		comboBox_blood_1.addItem("B-");
		comboBox_blood_1.addItem("O+");
		comboBox_blood_1.addItem("O-");
		comboBox_blood_1.addItem("AB+");
		comboBox_blood_1.addItem("AB-");
		comboBox_blood_1.setSelectedIndex(-1);
		
		comboBox_blood_1.setBounds(299, 194, 76, 22);
		panel_update.add(comboBox_blood_1);
		
		JRadioButton rdbtnMale_1 = new JRadioButton("MALE");
		rdbtnMale_1.setBounds(298, 222, 68, 25);
		panel_update.add(rdbtnMale_1);
		
		JRadioButton rdbtnNewRadioButton_2 = new JRadioButton("FEMALE");
		rdbtnNewRadioButton_2.setBounds(370, 222, 88, 25);
		panel_update.add(rdbtnNewRadioButton_2);
		
		JRadioButton rdbtnNewRadioButton_1_1 = new JRadioButton("OTHERS");
		rdbtnNewRadioButton_1_1.setBounds(462, 222, 88, 25);
		panel_update.add(rdbtnNewRadioButton_1_1);
		
		ButtonGroup bgroup=new ButtonGroup();
		bgroup.add(rdbtnMale_1);
		bgroup.add(rdbtnNewRadioButton_2);
		bgroup.add(rdbtnNewRadioButton_1_1);
		
		
		JLabel lblNewLabel_1 = new JLabel("00");
		lblNewLabel_1.setFont(new Font("Ravie", Font.BOLD, 16));
		lblNewLabel_1.setBounds(565, 256, 56, 36);
		panel_update.add(lblNewLabel_1);
		
		JSlider slider_1 = new JSlider(45, 90, 45);
		slider_1.addChangeListener(new ChangeListener() {
			public void stateChanged(ChangeEvent arg0) {
				lblNewLabel_1.setText(Integer.toString(slider_1.getValue()));  
			}
		});
		slider_1.setPaintTicks(true);
		slider_1.setPaintLabels(true);
		slider_1.setMinorTickSpacing(1);
		slider_1.setMajorTickSpacing(10);
		slider_1.setBounds(299, 246, 254, 46);
		panel_update.add(slider_1);
		
		textField_8 = new JTextField();
		textField_8.setColumns(10);
		textField_8.setBounds(299, 309, 178, 22);
		panel_update.add(textField_8);
		
		JTextArea textArea_1 = new JTextArea();
		textArea_1.setBounds(296, 344, 229, 64);
		panel_update.add(textArea_1);
		
		textField_9 = new JTextField();
		textField_9.setColumns(10);
		textField_9.setBounds(299, 416, 178, 22);
		panel_update.add(textField_9);
		
		JButton btnUpdate = new JButton("UPDATE");
		btnUpdate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				String email=final_mail_id_user;
				String query="select d_number from  donor_details where d_mail_id=\""+email+"\"";
				int donor_number=0;
				try {
					  Connection con = JavaBean.login.getConnection();
	     			Statement st=con.createStatement();
	     			ResultSet rs=st.executeQuery(query);
	     	
	     			while(rs.next())  {
	 				   donor_number= rs.getInt(1);
	     				
	     			} 
	     			con.close();
					
				} catch (Exception e) {
					System.out.println(e);
				}
     			
     			
     			String d_blood_group=new String((String) comboBox_blood_1.getItemAt(comboBox_blood_1.getSelectedIndex())); 
     			int d_age=(int) comboBox_age_1.getItemAt(comboBox_age_1.getSelectedIndex());
     			
     			
				int d_weight=slider_1.getValue();
				String d_city=textField_8.getText();
				String d_address=textArea_1.getText();				
	            String sex="";
				
				if (rdbtnMale_1.isSelected()) {
					sex= "m";
				}
                else if(rdbtnNewRadioButton_2.isSelected()) {
                    sex = "f";
                }
                else if(rdbtnNewRadioButton_1_1.isSelected()) {
                    sex = "o";
                }
				
				String u_first_name=textField_5.getText();
				String u_last_name=textField_6.getText();
				String u_mobile_no=textField_9.getText();
				try {
					  Connection con = JavaBean.login.getConnection();
					String query_user="update user_details set u_first_name=?,u_last_name=?,u_mobile_no=?,sex=?,u_blood_group=? where u_mail_id=\""+email+"\"";
					PreparedStatement pstmt1 = con.prepareStatement(query_user);
					pstmt1.setString(1,u_first_name);
					pstmt1.setString(2,u_last_name);
					pstmt1.setString(3,u_mobile_no);
					pstmt1.setString(4,sex);
					pstmt1.setString(5,d_blood_group);

					pstmt1.executeUpdate();
					
					String query1="update donor_details set d_age=?,d_blood_group=?,d_weight=?,d_city=?,d_address=? where d_number="+donor_number;
					PreparedStatement pstmt = con.prepareStatement(query1);
		            pstmt.setInt(1,d_age);
		            pstmt.setString(2,d_blood_group);
		            pstmt.setInt(3,d_weight);
		            pstmt.setString(4,d_city);
		            pstmt.setString(5,d_address);

		            pstmt.executeUpdate();
		            con.close();
		            JOptionPane.showMessageDialog(null, "UPDATED SUCCESFULLY");
					
				} catch (Exception e) {
					System.out.println(e);
				}
				
				
				
				
			}
		});
		btnUpdate.setBounds(287, 477, 97, 25);
		panel_update.add(btnUpdate);
		
		JButton btnExit_1 = new JButton("CANCEL");
		btnExit_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				layeredPane.removeAll();
				layeredPane.add(panel);
				layeredPane.repaint();
				layeredPane.revalidate();			
			}
		});
		btnExit_1.setBounds(441, 477, 97, 25);
		panel_update.add(btnExit_1);
		
		JPanel panel_2 = new JPanel();
		panel_2.setBackground(Color.PINK);
		panel_2.setForeground(Color.WHITE);
		panel_2.setBounds(575, 31, 132, 143);
		panel_update.add(panel_2);
		panel_2.setLayout(null);
		
		JLabel lblDonorNo = new JLabel("DONOR NO");
		lblDonorNo.setFont(new Font("Tahoma", Font.BOLD, 14));
		lblDonorNo.setBounds(26, 93, 94, 16);
		panel_2.add(lblDonorNo);
		
		JLabel label_8 = new JLabel("0");
		label_8.setBackground(Color.ORANGE);
		label_8.setFont(new Font("Ravie", Font.PLAIN, 16));
		label_8.setBounds(49, 49, 20, 31);
		panel_2.add(label_8);
		
		
		
		JPanel panel_donor_history = new JPanel();
		layeredPane.add(panel_donor_history, "5");
		panel_donor_history.setLayout(null);
		
		JScrollPane scrollPane_1 = new JScrollPane();
		scrollPane_1.setBounds(39, 84, 634, 313);
		panel_donor_history.add(scrollPane_1);
		
		
		
		table_2 = new JTable();
		table_2.setBounds(0, 0, 1, 1);
		panel_donor_history.add(table_2);
		
		table_2 = new JTable();
		table_2.setBounds(89, 274, 555, 248);
	
		DefaultTableModel model1=new DefaultTableModel();
		Object[] table_col1={"DONOR_NO","DATE","LOCATION","QUANTITY"};
		Object[] table_row1=new Object[0];
		model1.setColumnIdentifiers(table_col1);
		table_2.setModel(model1);
		scrollPane_1.setViewportView(table_2);
		
		JPanel DONATE_BLOOD = new JPanel();
		layeredPane.add(DONATE_BLOOD, "donation");
		
		panel_3.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				
				
				
				boolean has_next=true;
				try {
					String query_1="SELECT distinct d_number  FROM donor_details WHERE d_mail_id  =?";
					  Connection con = JavaBean.login.getConnection();  
	     			PreparedStatement myStmt1= con.prepareStatement(query_1);
	     			myStmt1.setString(1,final_mail_id_user);
	     			ResultSet rs_1=myStmt1.executeQuery();
	     			while(!rs_1.next())  {
	     				has_next=false;
	     				break;
	     				
	     			}
	     			con.close();
	     			

				} catch (Exception e4) {
					System.out.println(e4);
				}
				
				if(has_next){
					layeredPane.removeAll();
					layeredPane.add(DONATE_BLOOD);
					layeredPane.repaint();
					layeredPane.revalidate();
					
					
					
					String email=final_mail_id_user;
					String query1="select d_number from  donor_details where d_mail_id=\""+email+"\"";
					int donor_number=0;
					try {
						  Connection con = JavaBean.login.getConnection();
		     			Statement st=con.createStatement();
		     			ResultSet rs1=st.executeQuery(query1);
		     	
		     			while(rs1.next())  {
		 				   donor_number= rs1.getInt(1);
		     				
		     			} 
		     			con.close();
						
					} catch (Exception e1) {
						System.out.println(e1);
					}
					
					textField_10.setText(Integer.toString(donor_number));
					
					
		             try {
		            	    String mail_id=final_mail_id_user;
		            	 
			            	String query="select * from  user_details where u_mail_id=?";
			     			  Connection con = JavaBean.login.getConnection();
			     			PreparedStatement myStmt= con.prepareStatement(query);
			     			myStmt.setString(1,mail_id);
			     			ResultSet rs=myStmt.executeQuery();
			     			while(rs.next())  {
			     				textField_11.setText(rs.getString("u_blood_group"));
			     			}
			            					
						} catch (Exception e2) {
							JOptionPane.showMessageDialog(null,e2);
						}
				}
				else{
					JOptionPane.showMessageDialog(null,"ONLY REGISTERED DONORS CAN DONATE BLOOD");
				}
				

				
			}
			
		});
		DONATE_BLOOD.setLayout(null);
		
		JComboBox comboBox_quantity = new JComboBox();
		comboBox_quantity.setBounds(236, 171, 134, 22);
		DONATE_BLOOD.add(comboBox_quantity);
		
		comboBox_quantity.addItem("750");
		comboBox_quantity.addItem("1000");
		comboBox_quantity.addItem("1500");
		comboBox_quantity.addItem("2000");
		comboBox_quantity.setSelectedIndex(-1);
		
		JCheckBox chckbxIAgreeTo = new JCheckBox("I AGREE TO DONATE BLOOD");
		chckbxIAgreeTo.setBounds(51, 45, 200, 25);
		DONATE_BLOOD.add(chckbxIAgreeTo);
		
		JLabel lblDonorN = new JLabel("DONOR NO");
		lblDonorN.setBounds(63, 109, 114, 25);
		lblDonorN.setFont(new Font("Serif", Font.BOLD, 16));
		DONATE_BLOOD.add(lblDonorN);
		
		JLabel lblQuantity = new JLabel("QUANTITY(ml)");
		lblQuantity.setBounds(63, 169, 114, 25);
		lblQuantity.setFont(new Font("Serif", Font.BOLD, 16));
		DONATE_BLOOD.add(lblQuantity);
		
		JLabel lbl_location = new JLabel("LOCATION");
		lbl_location.setBounds(63, 223, 114, 25);
		lbl_location.setFont(new Font("Serif", Font.BOLD, 16));
		DONATE_BLOOD.add(lbl_location);
		
		
		JButton btnDonateNow = new JButton("DONATE NOW");
		btnDonateNow.setBounds(273, 360, 128, 37);
		btnDonateNow.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				if(chckbxIAgreeTo.isSelected()){
					int quantity=Integer.parseInt(String.valueOf(comboBox_quantity.getSelectedItem()));
					String location=textField_12.getText();
					String blood_type=textField_11.getText();
					
					String query="insert into all_donations(a_donation_no,a_donor_no,a_date,a_location,a_quantity,a_blood_type) values(?,?,sysdate(),?,?,?)";
					String for_count="SELECT count(*) FROM all_donations;";
					
					int rows_count=0;
					
					String email=final_mail_id_user;
					String query2="select d_number from  donor_details where d_mail_id=\""+email+"\"";
					int donor_number=0;
					try {
						  Connection con = JavaBean.login.getConnection();
		     			Statement st=con.createStatement();
		     			ResultSet rs2=st.executeQuery(query2);
		     	
		     			while(rs2.next())  {
		 				   donor_number= rs2.getInt(1);
		     				
		     			} 
		     			con.close();
						
					} catch (Exception e) {
						System.out.println(e);
					}
					
					try {
						  Connection con = JavaBean.login.getConnection();
		     			Statement st=con.createStatement();
		     			ResultSet rs=st.executeQuery(for_count);
		     			while(rs.next())  {
		     		    rows_count=rs.getInt(1);
		     						
		     			}
		     			PreparedStatement pstmt = con.prepareStatement(query);
			            pstmt.setInt(1,rows_count+1);
			            pstmt.setInt(2,donor_number);
			            pstmt.setString(3,location);
			            pstmt.setInt(4,quantity);
			            pstmt.setString(5,blood_type);

			            pstmt.executeUpdate();
			            JOptionPane.showMessageDialog(null, "THANK YOU FOR DONATING BLOOD");
			            
			            
			            int b_quantity=0;
			            int final_quantity;
			            String for_quantity="SELECT b_quantity FROM blood_stock where b_blood_type= \""+blood_type+"\"";
			            ResultSet rs1=st.executeQuery(for_quantity);
		     			while(rs1.next())  {
		     				b_quantity=rs1.getInt(1);
		     						
		     			}
		     			final_quantity=quantity+b_quantity;

			            
						String query_user="update blood_stock set b_quantity=? where b_blood_type=\""+blood_type+"\"";
						PreparedStatement pstmt1 = con.prepareStatement(query_user);
						pstmt1.setInt(1,final_quantity);

						pstmt1.executeUpdate();
			            con.close();
			            
			            
			     			}	
						catch (Exception e2) {
							JOptionPane.showMessageDialog(null,e2);
						}
		}
				else{
					 JOptionPane.showMessageDialog(null, "AGREE TO OUR CONDITIONS");
				}
		            
			}
		});
		DONATE_BLOOD.add(btnDonateNow);
		
		
		
		textField_12 = new JTextField();
		textField_12.setBounds(236, 226, 134, 22);
		DONATE_BLOOD.add(textField_12);
		textField_12.setColumns(10);
		
		textField_10 = new JTextField();
		textField_10.setBounds(236, 111, 134, 22);
		DONATE_BLOOD.add(textField_10);
		textField_10.setEditable(false);
		textField_10.setColumns(10);
		
		JLabel lbl_btype_1 = new JLabel("BLOOD_GROUP");
		lbl_btype_1.setFont(new Font("Serif", Font.BOLD, 16));
		lbl_btype_1.setBounds(63, 289, 134, 25);
		DONATE_BLOOD.add(lbl_btype_1);
		
		textField_11 = new JTextField();
		textField_11.setEditable(false);
		textField_11.setBounds(236, 291, 134, 22);
		DONATE_BLOOD.add(textField_11);
		textField_11.setColumns(10);
		
		JPanel panel_aboutus = new JPanel();
		layeredPane.add(panel_aboutus, "panel_aboutus");
		panel_aboutus.setLayout(null);
                
                BufferedImage myPicture4 = ImageIO.read(new File("D:\\aboutus.jpg"));
                             JLabel  lblNewLabel_3= new JLabel(new ImageIcon(myPicture4));
		
		
		
		lblNewLabel_3.setBounds(0, 0, 735, 573);
		panel_aboutus.add(lblNewLabel_3);
                
		
		JPanel panel_mission = new JPanel();
		layeredPane.add(panel_mission, "panel_mission");
		panel_mission.setLayout(null);
		
                BufferedImage myPicture3 = ImageIO.read(new File("D:\\vision.jpg"));
                             JLabel  lblNewLabel_4 = new JLabel(new ImageIcon(myPicture3));
		
		lblNewLabel_4.setBounds(0, 0, 735, 573);
		panel_mission.add(lblNewLabel_4);
		
		JPanel panel_people_behind = new JPanel();
		layeredPane.add(panel_people_behind, "panel_people_behind");
		panel_people_behind.setLayout(null);
                   
                
                
		
		
		
                
                  BufferedImage myPicture1 = ImageIO.read(new File("D:\\CANVA1.png"));
JLabel lblNewLabel_5 = new JLabel(new ImageIcon(myPicture1));
lblNewLabel_5.setBounds(0, 0, 735, 573);
		panel_people_behind.add(lblNewLabel_5);
		
		JPanel panel_learn_about_donation = new JPanel();
		layeredPane.add(panel_learn_about_donation, "panel_learn_about_donation");
                BufferedImage myPicture2 = ImageIO.read(new File("D:\\blood.jpg"));
                             JLabel  lblNewLabel_6 = new JLabel(new ImageIcon(myPicture2));
		lblNewLabel_6.setBounds(0, 0, 735, 573);
		panel_learn_about_donation.add(lblNewLabel_6);
                       
                           lblNewLabel_6 = new JLabel(new ImageIcon(myPicture2));
                               
      
		panel_learn_about_donation.setLayout(null);
                
		
		
		
		JPanel penel_request_blood = new JPanel();
		layeredPane.add(penel_request_blood, "7");
		penel_request_blood.setLayout(null);
		
		JLabel lblBloodGroup = new JLabel("BLOOD GROUP");
		lblBloodGroup.setFont(new Font("Serif", Font.BOLD, 16));
		lblBloodGroup.setBounds(96, 181, 139, 22);
		penel_request_blood.add(lblBloodGroup);
		
		JComboBox comboBox = new JComboBox();
		comboBox.setBounds(295, 182, 110, 22);
		penel_request_blood.add(comboBox);
		
		comboBox.addItem("A+");
		comboBox.addItem("B+");
		comboBox.addItem("A-");
		comboBox.addItem("B-");
		comboBox.addItem("O+");
		comboBox.addItem("O-");
		comboBox.addItem("AB+");
		comboBox.addItem("AB-");
		comboBox.setSelectedIndex(-1);
		
		JLabel lblQuantity_1 = new JLabel("QUANTITY");
		lblQuantity_1.setFont(new Font("Serif", Font.BOLD, 16));
		lblQuantity_1.setBounds(96, 245, 139, 22);
		penel_request_blood.add(lblQuantity_1);
		
		JComboBox comboBox_2 = new JComboBox();
		comboBox_2.setBounds(295, 246, 110, 22);
		penel_request_blood.add(comboBox_2);
		
		comboBox_2.addItem("750");
		comboBox_2.addItem("1000");
		comboBox_2.addItem("1500");
		comboBox_2.addItem("2000");
		comboBox_2.setSelectedIndex(-1);
		
		JButton btnRequestBlood = new JButton("REQUEST BLOOD");
		btnRequestBlood.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				
				int quantity=Integer.parseInt(String.valueOf(comboBox_2.getSelectedItem()));
				String blood_type=String.valueOf(comboBox.getSelectedItem());
		         
	            
				try {
					
				      Connection con = JavaBean.login.getConnection();
     			    Statement st=con.createStatement();
		            
		            int b_quantity=0;
		            int final_quantity;
		            String for_quantity="SELECT b_quantity FROM blood_stock where b_blood_type= \""+blood_type+"\"";
		            ResultSet rs1=st.executeQuery(for_quantity);
	     			while(rs1.next())  {
	     				b_quantity=rs1.getInt(1);
	     						
	     			}
	     			final_quantity=b_quantity-quantity;

		            
	     			
	     			if(final_quantity<0){
	     			   JOptionPane.showMessageDialog(null, "SORRY YOUR BLOOD REQUEST EXCEEDED OUR STOCK");
	     			}
	     			else{
						String query_user="update blood_stock set b_quantity=? where b_blood_type=\""+blood_type+"\"";
						PreparedStatement pstmt1 = con.prepareStatement(query_user);
						pstmt1.setInt(1,final_quantity);

						pstmt1.executeUpdate();
			            con.close();
			            
			            JOptionPane.showMessageDialog(null, "YOUR BLOOD REQUEST HAS BEEN ACCEPTED");
			            
			            layeredPane.removeAll();
						layeredPane.add(panel);
						layeredPane.repaint();
						layeredPane.revalidate();
	     				
	     			}

					
				} catch (Exception e) {
					System.out.println(e);
				}
	
				
			}
		});
		btnRequestBlood.setBounds(228, 340, 177, 25);
		penel_request_blood.add(btnRequestBlood);
		
		

		
		JPanel close_top = new JPanel();
		close_top.setBackground(Color.WHITE);
		close_top.setBounds(12, 13, 951, 30);
		getContentPane().add(close_top);
		close_top.setLayout(null);
		
		JPanel about_us = new JPanel();
		about_us.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				layeredPane.removeAll();
				layeredPane.add(panel_aboutus);
				layeredPane.repaint();
				layeredPane.revalidate();
			}
		});
		about_us.setBackground(new Color(204, 0, 0));
		about_us.setBounds(12, 126, 184, 73);
		getContentPane().add(about_us);
		about_us.setLayout(null);
		
		JLabel lbl = new JLabel("ABOUT US");
		lbl.setForeground(new Color(255, 255, 255));
		lbl.setFont(new Font("Yu Gothic", Font.BOLD, 14));
		lbl.setBounds(80, 32, 78, 17);
		about_us.add(lbl);
		
		JPanel vission = new JPanel();
		vission.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				layeredPane.removeAll();
				layeredPane.add(panel_mission);
				layeredPane.repaint();
				layeredPane.revalidate();
			}
		});
		//vission.setBackground(new Color(204, 166, 166));
                                vission.setBackground(new Color(204,0,0));
		vission.setBounds(12, 198, 184, 73);
		getContentPane().add(vission);
		vission.setLayout(null);
		
		String lbl_text="<html>";
		lbl_text+="VISION AND<br>";
		lbl_text+="MISSION<br>";
		
		
		JLabel lbl_1 = new JLabel();
		lbl_1.setForeground(Color.WHITE);
		lbl_1.setText(lbl_text);
		lbl_1.setFont(new Font("Yu Gothic", Font.BOLD, 14));
		lbl_1.setBounds(63, 0, 92, 60);
		vission.add(lbl_1);
		
		
		
		
		JPanel people_behind = new JPanel();
		people_behind.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				layeredPane.removeAll();
				layeredPane.add(panel_people_behind);
				layeredPane.repaint();
				layeredPane.revalidate();
			}
		});
		people_behind.setBackground(new Color(204, 0, 0));
		people_behind.setBounds(12, 271, 184, 73);
		getContentPane().add(people_behind);
		people_behind.setLayout(null);
		
		JLabel lblPeopleBehind = new JLabel("PEOPLE BEHIND");
		lblPeopleBehind.setForeground(Color.WHITE);
		lblPeopleBehind.setFont(new Font("Yu Gothic", Font.BOLD, 14));
		lblPeopleBehind.setBounds(47, 26, 125, 17);
		people_behind.add(lblPeopleBehind);
		
		JPanel learn_about_me = new JPanel();
		learn_about_me.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				layeredPane.removeAll();
				layeredPane.add(panel_learn_about_donation);
				layeredPane.repaint();
				layeredPane.revalidate();
			}
		});
		learn_about_me.setBackground(new Color(204, 0, 0));
		learn_about_me.setBounds(12, 339, 184, 73);
		getContentPane().add(learn_about_me);
		learn_about_me.setLayout(null);
		
		String lbl2_text="<html>";
		lbl2_text+="WHO CAN/<br>";
		lbl2_text+="CAN'T DONATE  <br>";
                                   
		
		JLabel lbl_2 = new JLabel();
		lbl_2.setForeground(Color.WHITE);
		lbl_2.setText(lbl2_text);
		lbl_2.setFont(new Font("Yu Gothic", Font.BOLD, 14));
		lbl_2.setBounds(59, 13, 113, 47);
		learn_about_me.add(lbl_2);
		
		JPanel donor_registration = new JPanel();
		donor_registration.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {

				
				
				boolean has_next=true;
				try {
					String query_1="SELECT distinct d_number  FROM donor_details WHERE d_mail_id  =?";
					  Connection con = JavaBean.login.getConnection();
	     			PreparedStatement myStmt1= con.prepareStatement(query_1);
	     			myStmt1.setString(1,final_mail_id_user);
	     			ResultSet rs_1=myStmt1.executeQuery();
	     			while(!rs_1.next())  {
	     				has_next=false;
	     				break;
	     				
	     			}
	     			con.close();
	     			

				} catch (Exception e4) {
					System.out.println(e4);
				}
				

     			
				if(!has_next){
	             try {
	            	 
	 				
	 				layeredPane.removeAll();
	 				layeredPane.add(panel_donorRegistration);
	 				layeredPane.repaint();
	 				layeredPane.revalidate();
	 				
	            	    String mail_id=final_mail_id_user;
	            	 
		            	String query="select * from  user_details where u_mail_id=?";
		     			  Connection con = JavaBean.login.getConnection();  
		     			PreparedStatement myStmt= con.prepareStatement(query);
		     			myStmt.setString(1,mail_id);
		     			ResultSet rs=myStmt.executeQuery();
		     			while(rs.next())  {
		     				textField.setText(rs.getString("u_first_name"));
		     				textField_1.setText(rs.getString("u_last_name"));
		     				textField_2.setText(rs.getString("u_mail_id"));
		     				comboBox_blood.getModel().setSelectedItem(rs.getString("u_blood_group"));
		     				String fm=rs.getString("sex");
		     				if(fm.equals("m")) rdbtnMale.setSelected(true);
		     				else if(fm.equals("f")) rdbtnNewRadioButton.setSelected(true);
		     				else rdbtnNewRadioButton_1.setSelected(true);
		     				textField_4.setText(rs.getString("u_mobile_no"));
		     				
		     			}
		            	
		            	 
						
					} catch (Exception e2) {
						JOptionPane.showMessageDialog(null,e2);
					}
				}
				else{
					JOptionPane.showMessageDialog(null,"YOU HAVE ALREADY REGISTERED");
					
				}
				
				
				
			}
		});
		donor_registration.setBackground(new Color(204, 0, 0));
		donor_registration.setBounds(198, 66, 122, 59);
		getContentPane().add(donor_registration);
		donor_registration.setLayout(null);
		
		
		String lbl3_text="<html>";
		lbl3_text+="BLOOD DONOR<br>";
		lbl3_text+="REGISTRATION<br>";
		
		JLabel lbl_3 = new JLabel();
		lbl_3.setForeground(Color.WHITE);
		lbl_3.setText(lbl3_text);
		lbl_3.setFont(new Font("Yu Gothic", Font.BOLD, 14));
		lbl_3.setBounds(0, 0, 110, 46);
		donor_registration.add(lbl_3);
		
		JPanel search_donor = new JPanel();
		search_donor.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				layeredPane.removeAll();
				layeredPane.add(panel_search_donor);
				layeredPane.repaint();
				layeredPane.revalidate();
				
			}
		});
		search_donor.setBackground(new Color(204, 0, 0));
		search_donor.setBounds(321, 66, 122, 59);
		getContentPane().add(search_donor);
		search_donor.setLayout(null);
		
		String JLabel_text="<html>";
		JLabel_text+="SEARCH<br>";
		JLabel_text+="DONOR<br>";
		
		JLabel lblSearchDonors = new JLabel();
		lblSearchDonors.setText(JLabel_text);
		lblSearchDonors.setForeground(Color.WHITE);
		lblSearchDonors.setFont(new Font("Yu Gothic", Font.BOLD, 14));
		lblSearchDonors.setBounds(12, 0, 110, 46);
		search_donor.add(lblSearchDonors);
		
		JPanel blood_availability = new JPanel();
		blood_availability.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				layeredPane.removeAll();
				layeredPane.add(panel_blood_stock);
				layeredPane.repaint();
				layeredPane.revalidate();
				
				//String blood[]={"A+","B+","A-","B-","AB+","AB-","O+","O-"};				
				
				try {
					String arr[]=new String[8];
					
				    String query="SELECT b_quantity FROM blood_stock order by blood_s_no;";		
					  Connection con = JavaBean.login.getConnection();
	     			Statement st=con.createStatement();
	     			ResultSet rs=st.executeQuery(query);
	     			int count=0;
	     			while(rs.next())  {
	     				arr[count]=Integer.toString(rs.getInt(1));
	     				count++;	     				
	     			}
	     			label.setText(arr[0]);
	     			label_1.setText(arr[1]);
	     			label_2.setText(arr[2]);
	     			label_3.setText(arr[3]);
	     			label_4.setText(arr[6]);
	     			label_5.setText(arr[7]);
	     			label_6.setText(arr[4]);
	     			label_7.setText(arr[5]);
	     			
					
					
				} catch (Exception e1) {
					System.out.println(e1);
				}
				

				
			}
		});
		blood_availability.setBackground(new Color(204, 0, 0));
		blood_availability.setBounds(445, 66, 122, 59);
		getContentPane().add(blood_availability);
		blood_availability.setLayout(null);
		
		String lbl4_text="<html>";
		lbl4_text+="BLOOD<br>";
		lbl4_text+="STOCK<br>";
		
		JLabel lbl_4 = new JLabel();
		lbl_4.setText(lbl4_text);
		lbl_4.setForeground(Color.WHITE);
		lbl_4.setFont(new Font("Yu Gothic", Font.BOLD, 14));
		lbl_4.setBounds(12, 0, 78, 46);
		blood_availability.add(lbl_4);
		
		JPanel update = new JPanel();
		update.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				
				
				
				
				
				boolean has_next=true;
				try {
					String query_1="SELECT distinct d_number  FROM donor_details WHERE d_mail_id  =?";
					  Connection con = JavaBean.login.getConnection(); 
	     			PreparedStatement myStmt1= con.prepareStatement(query_1);
	     			myStmt1.setString(1,final_mail_id_user);
	     			ResultSet rs_1=myStmt1.executeQuery();
	     			while(!rs_1.next())  {
	     				has_next=false;
	     				break;
	     				
	     			}
	     			con.close();
	     			

				} catch (Exception e4) {
					System.out.println(e4);
				}
				

     			
				if(has_next){
	              try {
	            	  
	            	  layeredPane.removeAll();
	  				layeredPane.add(panel_update);
	  				layeredPane.repaint();
	  				layeredPane.revalidate();
	  				String email =final_mail_id_user;
	  				
	  				int donor_number=0;
	  				try {
	  					String query="select d_number from  donor_details where d_mail_id=?";
	  			                Connection con = JavaBean.login.getConnection();  
	  	     			PreparedStatement myStmt= con.prepareStatement(query);
	  	     			myStmt.setString(1,email);
	  	     			ResultSet rs=myStmt.executeQuery();
	  	     			while(rs.next())  {
	  	 				   donor_number= rs.getInt(1);
	  	     				
	  	     			} 
	  	     			label_8.setText(Integer.toString(donor_number));
	  					
	  				} catch (Exception e1) {
	  					System.out.println(e1);
	  				}
	       			
	  				
	  				try {
	              	    
	              	 
	  	            	String query="select * from  user_details where u_mail_id=?";
	  	     			  Connection con = JavaBean.login.getConnection();
	  	     			PreparedStatement myStmt= con.prepareStatement(query);
	  	     			myStmt.setString(1,email);
	  	     			ResultSet rs=myStmt.executeQuery();
	  	     			while(rs.next())  {
	  	     				textField_5.setText(rs.getString("u_first_name"));
	  	     				textField_6.setText(rs.getString("u_last_name"));
	  	     				textField_9.setText(rs.getString("u_mobile_no"));
	  	     				textField_7.setText(rs.getString("u_mail_id"));
	  	     				comboBox_blood_1.getModel().setSelectedItem(rs.getString("u_blood_group"));
	  	     				String fm=rs.getString("sex");
	  	     				if(fm.equals("m")) rdbtnMale_1.setSelected(true);
	  	     				else if(fm.equals("f")) rdbtnNewRadioButton_2.setSelected(true);
	  	     				else rdbtnNewRadioButton_1_1.setSelected(true);
	  	     				
	  	     			}
	  	  		
	  	     			String query1="select * from  donor_details where d_number=?;";  
	  	     			PreparedStatement myStmt1= con.prepareStatement(query1);
	  	     			myStmt1.setInt(1,donor_number);
	  	     			ResultSet rs1=myStmt1.executeQuery();
	  	     			while(rs1.next())  {
	  	     				comboBox_age_1.getModel().setSelectedItem(Integer.toString(rs1.getInt("d_age")));
	  	     				textField_8.setText(rs1.getString("d_city"));
	  	     				slider_1.setValue(rs1.getInt("d_weight"));
	  	     				textArea_1.setText(rs1.getString("d_address"));
	  	     				
	  	     			}				
	  	     			con.close();
	  				} catch (Exception e2) {
	  					JOptionPane.showMessageDialog(null,e2);
	  				}
	            	  
	            	  
	              }
					
				 catch (Exception e2) {
					System.out.println(e2);
				}
	            	 
				}
				else  {
					JOptionPane.showMessageDialog(null,"ONLY REGISTERED DONORS CAN EDIT");
					
				}
			
			}
		});
		update.setBackground(new Color(204, 0, 0));
		update.setBounds(568, 66, 122, 59);
		getContentPane().add(update);
		update.setLayout(null);
		
		JLabel lblUpdate = new JLabel("UPDATE");
		lblUpdate.setForeground(Color.WHITE);
		lblUpdate.setFont(new Font("Yu Gothic", Font.BOLD, 14));
		lblUpdate.setBounds(12, 13, 78, 17);
		update.add(lblUpdate);
		
		JPanel donation_history = new JPanel();
		donation_history.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				
				
				
				
				boolean has_next=true;
				try {
					String query_1="SELECT distinct d_number  FROM donor_details WHERE d_mail_id  =?";
					  Connection con = JavaBean.login.getConnection();
	     		
	     			PreparedStatement myStmt1= con.prepareStatement(query_1);
	     			myStmt1.setString(1,final_mail_id_user);
	     			ResultSet rs_1=myStmt1.executeQuery();
	     			while(!rs_1.next())  {
	     				has_next=false;
	     				break;
	     				
	     			}
	     			con.close();
	     			

				} catch (Exception e4) {
					System.out.println(e4);
				}
				
				if(has_next){
					layeredPane.removeAll();
					layeredPane.add(panel_donor_history);
					layeredPane.repaint();
					layeredPane.revalidate();
					
					DefaultTableModel dm = (DefaultTableModel)table_2.getModel();
					while(dm.getRowCount() > 0)
					{
					    dm.removeRow(0);
					}
					
					
					
					String email=final_mail_id_user;
					String query1="select d_number from  donor_details where d_mail_id=\""+email+"\"";
					int donor_number=0;
					try {
						  Connection con = JavaBean.login.getConnection(); 
		     			Statement st=con.createStatement();
		     			ResultSet rs=st.executeQuery(query1);
		     	
		     			while(rs.next())  {
		 				   donor_number= rs.getInt(1);
		     				
		     			} 
						
					} catch (Exception e1) {
						System.out.println(e1);
					}
					
					
					
					String query="SELECT * from all_donations where a_donor_no="+donor_number;
					try {
		 				  Connection con = JavaBean.login.getConnection(); 
		     			Statement st=con.createStatement();
		     			ResultSet rs=st.executeQuery(query);
		     			while(rs.next())  {
		     				int DONOR_NO=rs.getInt(2);
		     				String DATE=rs.getString(3);
		     				String LOCATION=rs.getString(4);
		     				String QUANTITY=Integer.toString(rs.getInt(5));
		     				Object tblarr[]={DONOR_NO,DATE,LOCATION,QUANTITY+" ml"};
		     				DefaultTableModel model=(DefaultTableModel)table_2.getModel();
		     				model.addRow(tblarr);
		     						
		     			}		
			     			}	
						catch (Exception e2) {
							JOptionPane.showMessageDialog(null,e);
						}
				}
				else{
					JOptionPane.showMessageDialog(null,"YOU DONT HAVE DONATION HISTORY");
				}
				
				
				
				
			}
		});
		donation_history.setBackground(new Color(204,0,0));
		donation_history.setBounds(691, 66, 120, 59);
		getContentPane().add(donation_history);
		donation_history.setLayout(null);
		
		String lbl5_text="<html>";
		lbl5_text+="MY DONATION<br>";
		lbl5_text+="HISTORY<br>";
		
		JLabel lbl_5 = new JLabel();
		lbl_5.setText(lbl5_text);
		lbl_5.setForeground(Color.WHITE);
		lbl_5.setFont(new Font("Yu Gothic", Font.BOLD, 14));
		lbl_5.setBounds(12, 0, 110, 46);
		donation_history.add(lbl_5);
		
		JPanel log_out = new JPanel();
		log_out.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				setVisible(false);
			}
		});
		log_out.setBackground(new Color(204,0,0));
		log_out.setBounds(813, 66, 120, 59);
		getContentPane().add(log_out);
		log_out.setLayout(null);
		
		JLabel lblLogout = new JLabel("LOGOUT");
		lblLogout.setForeground(Color.WHITE);
		lblLogout.setFont(new Font("Yu Gothic", Font.BOLD, 14));
		lblLogout.setBounds(12, 13, 78, 17);
		log_out.add(lblLogout);
		
		JPanel panel_4 = new JPanel();
		panel_4.setBackground(Color.WHITE);
		panel_4.setBounds(12, 41, 951, 84);
		getContentPane().add(panel_4);
		panel_4.setLayout(null);
		
		JPanel panel_home = new JPanel();
		panel_home.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				layeredPane.removeAll();
				layeredPane.add(panel);
				layeredPane.repaint();
				layeredPane.revalidate();
			}
		});
		
		panel_home.setLayout(null);
		panel_home.setBackground(new Color(204,0,0));
		panel_home.setBounds(0, 25, 184, 65);
		panel_4.add(panel_home);
		
		JLabel lblHome = new JLabel("HOME");
		lblHome.setForeground(Color.WHITE);
		lblHome.setFont(new Font("Yu Gothic", Font.BOLD, 14));
		lblHome.setBounds(75, 13, 78, 17);
		panel_home.add(lblHome);
		
		JPanel panel_request_blood = new JPanel();
		panel_request_blood.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent arg0) {
				layeredPane.removeAll();
				layeredPane.add(penel_request_blood);
				layeredPane.repaint();
				layeredPane.revalidate();
				String email =final_mail_id_user;
				
			}
		});
		panel_request_blood.setLayout(null);
		panel_request_blood.setBackground(new Color(204,0,0));
		panel_request_blood.setBounds(12, 412, 184, 73);
		getContentPane().add(panel_request_blood);
		
		JLabel lblRequestBlood = new JLabel("REQUEST BLOOD");
		lblRequestBlood.setForeground(Color.WHITE);
		lblRequestBlood.setFont(new Font("Yu Gothic", Font.BOLD, 14));
		lblRequestBlood.setBounds(26, 32, 146, 17);
		panel_request_blood.add(lblRequestBlood);
		
		setResizable(false);
		setUndecorated(true);
                            setVisible(true);
	}
        public static void main(String[] args) throws IOException {
        new Home();
    }
}
class register_donor_no{
	static int donor_no;
	

	register_donor_no(){
		try {
			int last_row_no=0;
			
			String for_last_number="select *from donor_details order by d_number DESC LIMIT 1;";

				  Connection con = JavaBean.login.getConnection();
     			Statement st=con.createStatement();
     			ResultSet rs=st.executeQuery(for_last_number);
     			while(rs.next())  {
     				last_row_no=rs.getInt(1);					
     			}
     			donor_no=last_row_no+1;
		} catch (Exception e) {
			System.out.println(e);
		}
		
		
	}
	int get_no(){
		return donor_no;
	}
        
}
